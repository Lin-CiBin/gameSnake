{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"Container\"\n};\nconst _hoisted_2 = {\n  class: \"GridSpace\"\n};\nconst _hoisted_3 = {\n  class: \"rowSpace\"\n};\nconst _hoisted_4 = {\n  class: \"cell\"\n};\nconst _hoisted_5 = {\n  class: \"SnakeQube\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList($setup.GRID_SIZE, row => {\n    return _createElementVNode(\"div\", _hoisted_3, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList($setup.GRID_SIZE, col => {\n      return _createElementVNode(\"span\", _hoisted_4);\n    }), 64 /* STABLE_FRAGMENT */))]);\n  }), 64 /* STABLE_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiles, tile => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass(['SnakeCell']),\n      style: _normalizeStyle($setup.getTilePos(tile))\n    }, _toDisplayString(tile.value), 5 /* TEXT, STYLE */);\n  }), 256 /* UNKEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","GRID_SIZE","row","_hoisted_3","col","_hoisted_4","_hoisted_5","tiles","tile","_normalizeClass","style","_normalizeStyle","getTilePos","value"],"sources":["C:\\Users\\LIN\\Desktop\\vueproject\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <div class=\"Container\">\n    <div class=\"GridSpace\">\n      <div v-for=\"row in GRID_SIZE\" class=\"rowSpace\">\n        <span v-for=\"col in GRID_SIZE\" class=\"cell\"></span>\n      </div>\n      <div class=\"SnakeQube\">\n        <div v-for=\"tile in tiles\" :class=\"['SnakeCell']\" :style=\"getTilePos(tile)\">\n          {{ tile.value }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script setup>\nimport { onMounted, ref } from 'vue'\nconst GRID_SIZE = 4\nconst grid = ref([])\nconst tiles = ref({})\nconst emptyCell = ref({})\nonMounted(() => {\n  initGame()\n  createNewTile()\n})\n\nfunction initGame() {\n  grid.value = Array(GRID_SIZE).fill().map(() => Array(GRID_SIZE).fill(0))\n}\n\nfunction getEmptyCell() {\n  emptyCell.value = grid.value.flatMap((row, rowIndex) => row.map((cell, colIndex) => cell === 0 ? { row: rowIndex, col: colIndex } : null).filter(Boolean))\n}\n\nfunction createNewTile() {\n  getEmptyCell()\n  const id = `tile-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n  const { row, col } = emptyCell.value[Math.floor(Math.random() * emptyCell.value.length)]\n  grid.value[row][col] = 1\n  const tile = {\n    id,\n    prevRow: row,\n    prevCol: col,\n    row,\n    col,\n    value: grid.value[row][col]\n  };\n  tiles.value[id] = tile\n}\n\nfunction getTilePos(tile) {\n  const cellSize = 30\n  return {\n    top: `${tile.col * cellSize}px`\n  }\n}\n</script>\n\n<style scoped>\n.Container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 96vh;\n}\n\n.GridSpace {\n  display: flex;\n  flex-wrap: wrap;\n  width: 300px;\n}\n\n.rowSpace {\n  display: flex;\n}\n\n.cell {\n  background-color: bisque;\n  height: 30px;\n  width: 30px;\n}\n\n.SnakeQube,\n.SnakeCell {\n  position: absolute;\n  height: 30px;\n  width: 30px;\n}\n\n.SnakeCell {\n  background-color: rgb(68, 64, 58);\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAW;;EACUA,KAAK,EAAC;AAAU;;EACbA,KAAK,EAAC;AAAM;;EAExCA,KAAK,EAAC;AAAW;;uBAL1BC,mBAAA,CAWM,OAXNC,UAWM,GAVJC,mBAAA,CASM,OATNC,UASM,I,cARJH,mBAAA,CAEMI,SAAA,QAAAC,WAAA,CAFaC,MAAA,CAAAC,SAAS,EAAhBC,GAAG;WAAfN,mBAAA,CAEM,OAFNO,UAEM,I,cADJT,mBAAA,CAAmDI,SAAA,QAAAC,WAAA,CAA/BC,MAAA,CAAAC,SAAS,EAAhBG,GAAG;aAAhBR,mBAAA,CAAmD,QAAnDS,UAAmD;;kCAErDT,mBAAA,CAIM,OAJNU,UAIM,I,kBAHJZ,mBAAA,CAEMI,SAAA,QAAAC,WAAA,CAFcC,MAAA,CAAAO,KAAK,EAAbC,IAAI;yBAAhBd,mBAAA,CAEM;MAFsBD,KAAK,EAAAgB,eAAA,CAAE,aAAa;MAAGC,KAAK,EAAAC,eAAA,CAAEX,MAAA,CAAAY,UAAU,CAACJ,IAAI;wBACpEA,IAAI,CAACK,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}