{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"GridSpace\",\n  style: {\n    \"display\": \"flex\",\n    \"flex-wrap\": \"wrap\",\n    \"gap\": \"5px\",\n    \"width\": \"200px\"\n  }\n};\nconst _hoisted_2 = {\n  style: {\n    \"height\": \"25px\"\n  }\n};\nconst _hoisted_3 = {\n  style: {\n    \"background-color\": \"bisque\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList($setup.GRID_SIZE, row => {\n    return _createElementVNode(\"div\", _hoisted_2, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList($setup.GRID_SIZE, col => {\n      return _createElementVNode(\"span\", _hoisted_3, \"1\");\n    }), 64 /* STABLE_FRAGMENT */))]);\n  }), 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_Fragment","_renderList","$setup","GRID_SIZE","row","_createElementVNode","_hoisted_2","col","_hoisted_3"],"sources":["C:\\Users\\LIN\\Desktop\\vueproject\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <div class=\"GridSpace\" style=\"display: flex;flex-wrap: wrap;gap: 5px;width: 200px;\">\n    <div v-for=\"row in GRID_SIZE\" style=\"height: 25px;\">\n      <span v-for=\"col in GRID_SIZE\" style=\"background-color: bisque;\">1</span>\n    </div>\n  </div>\n\n</template>\n<script setup>\nimport { onMounted, ref } from 'vue'\nconst GRID_SIZE = 20\nconst grid = ref([])\nconst tiles = ref({})\nconst emptyCell = ref({})\nonMounted(() => {\n  initGame()\n  createNewTile()\n})\n\nfunction initGame() {\n  grid.value = Array(GRID_SIZE).fill().map(() => Array(GRID_SIZE).fill(0))\n}\n\nfunction getEmptyCell() {\n  emptyCell.value = grid.value.flatMap((row, rowIndex) => row.map((cell, colIndex) => cell === 0 ? { row: rowIndex, col: colIndex } : null).filter(Boolean))\n}\n\nfunction createNewTile() {\n  getEmptyCell()\n  const id = `tile-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n  const { row, col } = emptyCell.value[Math.floor(Math.random() * emptyCell.value.length)]\n  grid.value[row][col] = 1\n  const tile = {\n    id,\n    prevRow: row,\n    prevCol: col,\n    row,\n    col,\n  };\n  tiles.value[id] = tile\n}\n\n\n</script>"],"mappings":";;EACOA,KAAK,EAAC,WAAW;EAACC,KAA4D,EAA5D;IAAA;IAAA;IAAA;IAAA;EAAA;;;EACSA,KAAqB,EAArB;IAAA;EAAA;AAAqB;;EAClBA,KAAiC,EAAjC;IAAA;EAAA;AAAiC;;uBAFpEC,mBAAA,CAIM,OAJNC,UAIM,I,cAHJD,mBAAA,CAEME,SAAA,QAAAC,WAAA,CAFaC,MAAA,CAAAC,SAAS,EAAhBC,GAAG;WAAfC,mBAAA,CAEM,OAFNC,UAEM,I,cADJR,mBAAA,CAAyEE,SAAA,QAAAC,WAAA,CAArDC,MAAA,CAAAC,SAAS,EAAhBI,GAAG;aAAhBF,mBAAA,CAAyE,QAAzEG,UAAyE,EAAR,GAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}