{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"height\": \"25px\",\n    \"border\": \"red 1px solid\"\n  }\n};\nconst _hoisted_2 = {\n  style: {\n    \"height\": \"20px\",\n    \"border\": \"red 1px solid\",\n    \"width\": \"20px\",\n    \"background-color\": \"bisque\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.grid, row => {\n    return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, col => {\n      return _openBlock(), _createElementBlock(\"span\", _hoisted_2);\n    }), 256 /* UNKEYED_FRAGMENT */))]);\n  }), 256 /* UNKEYED_FRAGMENT */);\n}","map":{"version":3,"names":["style","_createElementBlock","_Fragment","_renderList","$setup","grid","row","_hoisted_1","col","_hoisted_2"],"sources":["C:\\Users\\LIN\\Desktop\\vueproject\\src\\views\\AboutView.vue"],"sourcesContent":["<template>\n  <div v-for=\"row in grid\" style=\"height: 25px;border: red 1px solid;\">\n    <span v-for=\"col in row\" style=\"height: 20px;border: red 1px solid;width: 20px;background-color: bisque;\"></span>\n  </div>\n</template>\n<script setup>\nimport { onMounted, ref } from 'vue'\nconst GRID_SIZE = 20\nconst grid = ref([])\nconst tiles = ref({})\nconst emptyCell = ref({})\nonMounted(() => {\n  initGame()\n  createNewTile()\n})\n\nfunction initGame() {\n  grid.value = Array(GRID_SIZE).fill().map(() => Array(GRID_SIZE).fill(0))\n}\n\nfunction getEmptyCell() {\n  emptyCell.value = grid.value.flatMap((row, rowIndex) => row.map((cell, colIndex) => cell === 0 ? { row: rowIndex, col: colIndex } : null).filter(Boolean))\n}\n\nfunction createNewTile() {\n  getEmptyCell()\n  const id = `tile-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n  const { row, col } = emptyCell.value[Math.floor(Math.random() * emptyCell.value.length)]\n  grid.value[row][col] = 1\n  const tile = {\n    id,\n    prevRow: row,\n    prevCol: col,\n    row,\n    col,\n  };\n  tiles.value[id] = tile\n}\n\n\n</script>"],"mappings":";;EAC2BA,KAA2C,EAA3C;IAAA;IAAA;EAAA;AAA2C;;EACzCA,KAAgF,EAAhF;IAAA;IAAA;IAAA;IAAA;EAAA;AAAgF;;2BAD3GC,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFaC,MAAA,CAAAC,IAAI,EAAXC,GAAG;yBAAfL,mBAAA,CAEM,OAFNM,UAEM,I,kBADJN,mBAAA,CAAiHC,SAAA,QAAAC,WAAA,CAA7FG,GAAG,EAAVE,GAAG;2BAAhBP,mBAAA,CAAiH,QAAjHQ,UAAiH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}